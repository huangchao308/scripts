//*
// 给游戏服务器提供的内部接口协议

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.19.4
// source: internal_game.proto

package pb

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type GAMEID int32

const (
	GAMEID_GAME_ID_UNKNOWN   GAMEID = 0
	GAMEID_GAME_ID_LUDO      GAMEID = 1 // 飞行棋
	GAMEID_GAME_ID_CARROM    GAMEID = 2 // 撞球
	GAMEID_GAME_ID_BILLIARDS GAMEID = 3 // 桌球
)

// Enum value maps for GAMEID.
var (
	GAMEID_name = map[int32]string{
		0: "GAME_ID_UNKNOWN",
		1: "GAME_ID_LUDO",
		2: "GAME_ID_CARROM",
		3: "GAME_ID_BILLIARDS",
	}
	GAMEID_value = map[string]int32{
		"GAME_ID_UNKNOWN":   0,
		"GAME_ID_LUDO":      1,
		"GAME_ID_CARROM":    2,
		"GAME_ID_BILLIARDS": 3,
	}
)

func (x GAMEID) Enum() *GAMEID {
	p := new(GAMEID)
	*p = x
	return p
}

func (x GAMEID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GAMEID) Descriptor() protoreflect.EnumDescriptor {
	return file_internal_game_proto_enumTypes[0].Descriptor()
}

func (GAMEID) Type() protoreflect.EnumType {
	return &file_internal_game_proto_enumTypes[0]
}

func (x GAMEID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GAMEID.Descriptor instead.
func (GAMEID) EnumDescriptor() ([]byte, []int) {
	return file_internal_game_proto_rawDescGZIP(), []int{0}
}

type GAMEMODE int32

const (
	GAMEMODE_GAME_MODE_ONE_VS_ONE GAMEMODE = 0 // 1v1模式
	GAMEMODE_GAME_MODE_TWO_VS_TWO GAMEMODE = 1 // 2v2模式
	GAMEMODE_GAME_MODE_FOUR       GAMEMODE = 2 // 4玩家模式
)

// Enum value maps for GAMEMODE.
var (
	GAMEMODE_name = map[int32]string{
		0: "GAME_MODE_ONE_VS_ONE",
		1: "GAME_MODE_TWO_VS_TWO",
		2: "GAME_MODE_FOUR",
	}
	GAMEMODE_value = map[string]int32{
		"GAME_MODE_ONE_VS_ONE": 0,
		"GAME_MODE_TWO_VS_TWO": 1,
		"GAME_MODE_FOUR":       2,
	}
)

func (x GAMEMODE) Enum() *GAMEMODE {
	p := new(GAMEMODE)
	*p = x
	return p
}

func (x GAMEMODE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GAMEMODE) Descriptor() protoreflect.EnumDescriptor {
	return file_internal_game_proto_enumTypes[1].Descriptor()
}

func (GAMEMODE) Type() protoreflect.EnumType {
	return &file_internal_game_proto_enumTypes[1]
}

func (x GAMEMODE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GAMEMODE.Descriptor instead.
func (GAMEMODE) EnumDescriptor() ([]byte, []int) {
	return file_internal_game_proto_rawDescGZIP(), []int{1}
}

type MONEY_TYPE int32

const (
	MONEY_TYPE_GAME_MONEY_TYPE_COIN    MONEY_TYPE = 0 // 金币
	MONEY_TYPE_GAME_MONEY_TYPE_CHARM   MONEY_TYPE = 1 // 魅力值
	MONEY_TYPE_GAME_MONEY_TYPE_DIAMOND MONEY_TYPE = 2 // 钻石
)

// Enum value maps for MONEY_TYPE.
var (
	MONEY_TYPE_name = map[int32]string{
		0: "GAME_MONEY_TYPE_COIN",
		1: "GAME_MONEY_TYPE_CHARM",
		2: "GAME_MONEY_TYPE_DIAMOND",
	}
	MONEY_TYPE_value = map[string]int32{
		"GAME_MONEY_TYPE_COIN":    0,
		"GAME_MONEY_TYPE_CHARM":   1,
		"GAME_MONEY_TYPE_DIAMOND": 2,
	}
)

func (x MONEY_TYPE) Enum() *MONEY_TYPE {
	p := new(MONEY_TYPE)
	*p = x
	return p
}

func (x MONEY_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MONEY_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_internal_game_proto_enumTypes[2].Descriptor()
}

func (MONEY_TYPE) Type() protoreflect.EnumType {
	return &file_internal_game_proto_enumTypes[2]
}

func (x MONEY_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MONEY_TYPE.Descriptor instead.
func (MONEY_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_internal_game_proto_rawDescGZIP(), []int{2}
}

type OP_DETAIL int32

const (
	OP_DETAIL_OP_DETAIL_RECHARGE        OP_DETAIL = 0  // 充值
	OP_DETAIL_OP_DETAIL_CONSUME         OP_DETAIL = 1  // 消费
	OP_DETAIL_OP_DETAIL_INCOME          OP_DETAIL = 2  // 收入
	OP_DETAIL_OP_DETAIL_WITHDRAW        OP_DETAIL = 3  // 提现
	OP_DETAIL_OP_DETAIL_CONFISCATE      OP_DETAIL = 4  // 没收
	OP_DETAIL_OP_DETAIL_REFUND          OP_DETAIL = 5  // 退款
	OP_DETAIL_OP_DETAIL_SUBSIDY         OP_DETAIL = 6  // 补贴
	OP_DETAIL_OP_DETAIL_GIVE            OP_DETAIL = 7  // 赠送
	OP_DETAIL_OP_DETAIL_PROXY_RECHARGE  OP_DETAIL = 8  // 代充
	OP_DETAIL_OP_DETAIL_GAME_BET        OP_DETAIL = 9  // 游戏下注
	OP_DETAIL_OP_DETAIL_GAME_SETTLEMENT OP_DETAIL = 10 // 游戏结算
	OP_DETAIL_OP_DETAIL_TASK_REWARD     OP_DETAIL = 11 // 任务奖励
	OP_DETAIL_OP_DETAIL_INIT_USER       OP_DETAIL = 12 // 用户初始化发放
	OP_DETAIL_OP_DETAIL_OHTERS          OP_DETAIL = 13 // 其他
)

// Enum value maps for OP_DETAIL.
var (
	OP_DETAIL_name = map[int32]string{
		0:  "OP_DETAIL_RECHARGE",
		1:  "OP_DETAIL_CONSUME",
		2:  "OP_DETAIL_INCOME",
		3:  "OP_DETAIL_WITHDRAW",
		4:  "OP_DETAIL_CONFISCATE",
		5:  "OP_DETAIL_REFUND",
		6:  "OP_DETAIL_SUBSIDY",
		7:  "OP_DETAIL_GIVE",
		8:  "OP_DETAIL_PROXY_RECHARGE",
		9:  "OP_DETAIL_GAME_BET",
		10: "OP_DETAIL_GAME_SETTLEMENT",
		11: "OP_DETAIL_TASK_REWARD",
		12: "OP_DETAIL_INIT_USER",
		13: "OP_DETAIL_OHTERS",
	}
	OP_DETAIL_value = map[string]int32{
		"OP_DETAIL_RECHARGE":        0,
		"OP_DETAIL_CONSUME":         1,
		"OP_DETAIL_INCOME":          2,
		"OP_DETAIL_WITHDRAW":        3,
		"OP_DETAIL_CONFISCATE":      4,
		"OP_DETAIL_REFUND":          5,
		"OP_DETAIL_SUBSIDY":         6,
		"OP_DETAIL_GIVE":            7,
		"OP_DETAIL_PROXY_RECHARGE":  8,
		"OP_DETAIL_GAME_BET":        9,
		"OP_DETAIL_GAME_SETTLEMENT": 10,
		"OP_DETAIL_TASK_REWARD":     11,
		"OP_DETAIL_INIT_USER":       12,
		"OP_DETAIL_OHTERS":          13,
	}
)

func (x OP_DETAIL) Enum() *OP_DETAIL {
	p := new(OP_DETAIL)
	*p = x
	return p
}

func (x OP_DETAIL) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OP_DETAIL) Descriptor() protoreflect.EnumDescriptor {
	return file_internal_game_proto_enumTypes[3].Descriptor()
}

func (OP_DETAIL) Type() protoreflect.EnumType {
	return &file_internal_game_proto_enumTypes[3]
}

func (x OP_DETAIL) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OP_DETAIL.Descriptor instead.
func (OP_DETAIL) EnumDescriptor() ([]byte, []int) {
	return file_internal_game_proto_rawDescGZIP(), []int{3}
}

type ReqDiamondExchangeCallback struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId    *uint32 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3,oneof" json:"user_id,omitempty"`          // 用户ID
	Success   *bool   `protobuf:"varint,2,opt,name=success,proto3,oneof" json:"success,omitempty"`                      // 是否兑换成功
	GameChips *int32  `protobuf:"varint,3,opt,name=game_chips,json=gameChips,proto3,oneof" json:"game_chips,omitempty"` // 兑换增加的筹码数
	GameCoin  *int32  `protobuf:"varint,4,opt,name=game_coin,json=gameCoin,proto3,oneof" json:"game_coin,omitempty"`    // 兑换增加的金币数
	Diamond   *int32  `protobuf:"varint,5,opt,name=diamond,proto3,oneof" json:"diamond,omitempty"`                      // 兑换消耗的钻石数
}

func (x *ReqDiamondExchangeCallback) Reset() {
	*x = ReqDiamondExchangeCallback{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_game_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqDiamondExchangeCallback) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqDiamondExchangeCallback) ProtoMessage() {}

func (x *ReqDiamondExchangeCallback) ProtoReflect() protoreflect.Message {
	mi := &file_internal_game_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqDiamondExchangeCallback.ProtoReflect.Descriptor instead.
func (*ReqDiamondExchangeCallback) Descriptor() ([]byte, []int) {
	return file_internal_game_proto_rawDescGZIP(), []int{0}
}

func (x *ReqDiamondExchangeCallback) GetUserId() uint32 {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return 0
}

func (x *ReqDiamondExchangeCallback) GetSuccess() bool {
	if x != nil && x.Success != nil {
		return *x.Success
	}
	return false
}

func (x *ReqDiamondExchangeCallback) GetGameChips() int32 {
	if x != nil && x.GameChips != nil {
		return *x.GameChips
	}
	return 0
}

func (x *ReqDiamondExchangeCallback) GetGameCoin() int32 {
	if x != nil && x.GameCoin != nil {
		return *x.GameCoin
	}
	return 0
}

func (x *ReqDiamondExchangeCallback) GetDiamond() int32 {
	if x != nil && x.Diamond != nil {
		return *x.Diamond
	}
	return 0
}

type RspDiamondExchangeCallback struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code *int32  `protobuf:"varint,1,opt,name=code,proto3,oneof" json:"code,omitempty"`
	Msg  *string `protobuf:"bytes,2,opt,name=msg,proto3,oneof" json:"msg,omitempty"`
}

func (x *RspDiamondExchangeCallback) Reset() {
	*x = RspDiamondExchangeCallback{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_game_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspDiamondExchangeCallback) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspDiamondExchangeCallback) ProtoMessage() {}

func (x *RspDiamondExchangeCallback) ProtoReflect() protoreflect.Message {
	mi := &file_internal_game_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspDiamondExchangeCallback.ProtoReflect.Descriptor instead.
func (*RspDiamondExchangeCallback) Descriptor() ([]byte, []int) {
	return file_internal_game_proto_rawDescGZIP(), []int{1}
}

func (x *RspDiamondExchangeCallback) GetCode() int32 {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return 0
}

func (x *RspDiamondExchangeCallback) GetMsg() string {
	if x != nil && x.Msg != nil {
		return *x.Msg
	}
	return ""
}

type ReqNotifyUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid   []uint32 `protobuf:"varint,1,rep,packed,name=uid,proto3" json:"uid,omitempty"`   // 用户 ID 列表
	Msg   *string  `protobuf:"bytes,2,opt,name=msg,proto3,oneof" json:"msg,omitempty"`     // 消息内容文本，需要自行处理多语言
	Extra *string  `protobuf:"bytes,3,opt,name=extra,proto3,oneof" json:"extra,omitempty"` // 额外的附带信息，需要序列化成 JSON 字符串
}

func (x *ReqNotifyUser) Reset() {
	*x = ReqNotifyUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_game_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqNotifyUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqNotifyUser) ProtoMessage() {}

func (x *ReqNotifyUser) ProtoReflect() protoreflect.Message {
	mi := &file_internal_game_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqNotifyUser.ProtoReflect.Descriptor instead.
func (*ReqNotifyUser) Descriptor() ([]byte, []int) {
	return file_internal_game_proto_rawDescGZIP(), []int{2}
}

func (x *ReqNotifyUser) GetUid() []uint32 {
	if x != nil {
		return x.Uid
	}
	return nil
}

func (x *ReqNotifyUser) GetMsg() string {
	if x != nil && x.Msg != nil {
		return *x.Msg
	}
	return ""
}

func (x *ReqNotifyUser) GetExtra() string {
	if x != nil && x.Extra != nil {
		return *x.Extra
	}
	return ""
}

type RspNotifyUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code *int32  `protobuf:"varint,1,opt,name=code,proto3,oneof" json:"code,omitempty"`
	Msg  *string `protobuf:"bytes,2,opt,name=msg,proto3,oneof" json:"msg,omitempty"`
}

func (x *RspNotifyUser) Reset() {
	*x = RspNotifyUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_game_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspNotifyUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspNotifyUser) ProtoMessage() {}

func (x *RspNotifyUser) ProtoReflect() protoreflect.Message {
	mi := &file_internal_game_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspNotifyUser.ProtoReflect.Descriptor instead.
func (*RspNotifyUser) Descriptor() ([]byte, []int) {
	return file_internal_game_proto_rawDescGZIP(), []int{3}
}

func (x *RspNotifyUser) GetCode() int32 {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return 0
}

func (x *RspNotifyUser) GetMsg() string {
	if x != nil && x.Msg != nil {
		return *x.Msg
	}
	return ""
}

type GameParticipant struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId uint32 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` // 用户ID
	Rank   int32  `protobuf:"varint,2,opt,name=rank,proto3" json:"rank,omitempty"`                   // 本局游戏名次
	IsWin  int32  `protobuf:"varint,3,opt,name=is_win,json=isWin,proto3" json:"is_win,omitempty"`    // 是否胜利, 0 输, 1 胜
	Exp    int32  `protobuf:"varint,4,opt,name=exp,proto3" json:"exp,omitempty"`                     // 用户获得的游戏经验值
	Coin   int32  `protobuf:"varint,5,opt,name=coin,proto3" json:"coin,omitempty"`                   // 用户获得的游戏金币数量
}

func (x *GameParticipant) Reset() {
	*x = GameParticipant{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_game_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameParticipant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameParticipant) ProtoMessage() {}

func (x *GameParticipant) ProtoReflect() protoreflect.Message {
	mi := &file_internal_game_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameParticipant.ProtoReflect.Descriptor instead.
func (*GameParticipant) Descriptor() ([]byte, []int) {
	return file_internal_game_proto_rawDescGZIP(), []int{4}
}

func (x *GameParticipant) GetUserId() uint32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *GameParticipant) GetRank() int32 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *GameParticipant) GetIsWin() int32 {
	if x != nil {
		return x.IsWin
	}
	return 0
}

func (x *GameParticipant) GetExp() int32 {
	if x != nil {
		return x.Exp
	}
	return 0
}

func (x *GameParticipant) GetCoin() int32 {
	if x != nil {
		return x.Coin
	}
	return 0
}

// 游戏结算请求体
type ReqSettlement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoomId       string             `protobuf:"bytes,1,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`        // 游戏对局 ID
	GameId       int32              `protobuf:"varint,2,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`       // 游戏 ID, 参见 GAMEID
	GameMode     int32              `protobuf:"varint,3,opt,name=game_mode,json=gameMode,proto3" json:"game_mode,omitempty"` // 游戏模式, 参见 GAMEMODE
	Duration     int32              `protobuf:"varint,4,opt,name=duration,proto3" json:"duration,omitempty"`                 // 游戏时长，单位秒
	Participants []*GameParticipant `protobuf:"bytes,5,rep,name=participants,proto3" json:"participants,omitempty"`          // 游戏玩家列表
	OwnerId      uint32             `protobuf:"varint,6,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty"`    // 房主 ID
}

func (x *ReqSettlement) Reset() {
	*x = ReqSettlement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_game_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqSettlement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqSettlement) ProtoMessage() {}

func (x *ReqSettlement) ProtoReflect() protoreflect.Message {
	mi := &file_internal_game_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqSettlement.ProtoReflect.Descriptor instead.
func (*ReqSettlement) Descriptor() ([]byte, []int) {
	return file_internal_game_proto_rawDescGZIP(), []int{5}
}

func (x *ReqSettlement) GetRoomId() string {
	if x != nil {
		return x.RoomId
	}
	return ""
}

func (x *ReqSettlement) GetGameId() int32 {
	if x != nil {
		return x.GameId
	}
	return 0
}

func (x *ReqSettlement) GetGameMode() int32 {
	if x != nil {
		return x.GameMode
	}
	return 0
}

func (x *ReqSettlement) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *ReqSettlement) GetParticipants() []*GameParticipant {
	if x != nil {
		return x.Participants
	}
	return nil
}

func (x *ReqSettlement) GetOwnerId() uint32 {
	if x != nil {
		return x.OwnerId
	}
	return 0
}

type RspSettlementData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId uint32 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` // 用户ID
	Exp    int32  `protobuf:"varint,2,opt,name=exp,proto3" json:"exp,omitempty"`                     // 用户当前游戏经验值
	Coin   int32  `protobuf:"varint,3,opt,name=coin,proto3" json:"coin,omitempty"`                   // 用户当前游戏金币数量
}

func (x *RspSettlementData) Reset() {
	*x = RspSettlementData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_game_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspSettlementData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspSettlementData) ProtoMessage() {}

func (x *RspSettlementData) ProtoReflect() protoreflect.Message {
	mi := &file_internal_game_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspSettlementData.ProtoReflect.Descriptor instead.
func (*RspSettlementData) Descriptor() ([]byte, []int) {
	return file_internal_game_proto_rawDescGZIP(), []int{6}
}

func (x *RspSettlementData) GetUserId() uint32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *RspSettlementData) GetExp() int32 {
	if x != nil {
		return x.Exp
	}
	return 0
}

func (x *RspSettlementData) GetCoin() int32 {
	if x != nil {
		return x.Coin
	}
	return 0
}

// 游戏结算响应体
type RspSettlement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool                 `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"` // 是否成功
	Msg     string               `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`          // 错误消息
	Data    []*RspSettlementData `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`        // 游戏结算数据
}

func (x *RspSettlement) Reset() {
	*x = RspSettlement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_game_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspSettlement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspSettlement) ProtoMessage() {}

func (x *RspSettlement) ProtoReflect() protoreflect.Message {
	mi := &file_internal_game_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspSettlement.ProtoReflect.Descriptor instead.
func (*RspSettlement) Descriptor() ([]byte, []int) {
	return file_internal_game_proto_rawDescGZIP(), []int{7}
}

func (x *RspSettlement) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *RspSettlement) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *RspSettlement) GetData() []*RspSettlementData {
	if x != nil {
		return x.Data
	}
	return nil
}

// 游戏货币操作接口请求体
type ReqCoin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderId   string `protobuf:"bytes,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`        // 订单 ID, 用于做幂等逻辑。建议生成规则为： <game_engine>_<user_id>_<op>_<ts>，比如来自 unity 游戏的订单的ID是： unity_816175850_0_1657705260374
	UserId    uint32 `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`          // 用户ID
	MoneyType int32  `protobuf:"varint,3,opt,name=money_type,json=moneyType,proto3" json:"money_type,omitempty"` // 货币类型, 参见 MONEY_TYPE
	Op        int32  `protobuf:"varint,4,opt,name=op,proto3" json:"op,omitempty"`                                // 操作类型，0 增加，1 减少
	OpDetail  int32  `protobuf:"varint,5,opt,name=op_detail,json=opDetail,proto3" json:"op_detail,omitempty"`    // 操作详情, 参见 OP_DETAIL
	Amount    int32  `protobuf:"varint,6,opt,name=amount,proto3" json:"amount,omitempty"`                        // 操作金额
	Ts        int64  `protobuf:"varint,7,opt,name=ts,proto3" json:"ts,omitempty"`                                // 操作时间戳, 单位秒
	Desc      string `protobuf:"bytes,8,opt,name=desc,proto3" json:"desc,omitempty"`                             // 账单说明，比如： 钻石兑换金币、新用户赠送金币、皮肤体验卡转金币等
}

func (x *ReqCoin) Reset() {
	*x = ReqCoin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_game_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqCoin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqCoin) ProtoMessage() {}

func (x *ReqCoin) ProtoReflect() protoreflect.Message {
	mi := &file_internal_game_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqCoin.ProtoReflect.Descriptor instead.
func (*ReqCoin) Descriptor() ([]byte, []int) {
	return file_internal_game_proto_rawDescGZIP(), []int{8}
}

func (x *ReqCoin) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *ReqCoin) GetUserId() uint32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ReqCoin) GetMoneyType() int32 {
	if x != nil {
		return x.MoneyType
	}
	return 0
}

func (x *ReqCoin) GetOp() int32 {
	if x != nil {
		return x.Op
	}
	return 0
}

func (x *ReqCoin) GetOpDetail() int32 {
	if x != nil {
		return x.OpDetail
	}
	return 0
}

func (x *ReqCoin) GetAmount() int32 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *ReqCoin) GetTs() int64 {
	if x != nil {
		return x.Ts
	}
	return 0
}

func (x *ReqCoin) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

type UserBalance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MoneyType *int32 `protobuf:"varint,1,opt,name=money_type,json=moneyType,proto3,oneof" json:"money_type,omitempty"` // 货币类型, 参见 MONEY_TYPE
	Amount    *int32 `protobuf:"varint,2,opt,name=amount,proto3,oneof" json:"amount,omitempty"`                        // 货币余额
}

func (x *UserBalance) Reset() {
	*x = UserBalance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_game_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserBalance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserBalance) ProtoMessage() {}

func (x *UserBalance) ProtoReflect() protoreflect.Message {
	mi := &file_internal_game_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserBalance.ProtoReflect.Descriptor instead.
func (*UserBalance) Descriptor() ([]byte, []int) {
	return file_internal_game_proto_rawDescGZIP(), []int{9}
}

func (x *UserBalance) GetMoneyType() int32 {
	if x != nil && x.MoneyType != nil {
		return *x.MoneyType
	}
	return 0
}

func (x *UserBalance) GetAmount() int32 {
	if x != nil && x.Amount != nil {
		return *x.Amount
	}
	return 0
}

type RspCoinData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId  uint32         `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` // 用户ID
	Balance []*UserBalance `protobuf:"bytes,2,rep,name=balance,proto3" json:"balance,omitempty"`              // 货币余额列表
}

func (x *RspCoinData) Reset() {
	*x = RspCoinData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_game_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspCoinData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspCoinData) ProtoMessage() {}

func (x *RspCoinData) ProtoReflect() protoreflect.Message {
	mi := &file_internal_game_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspCoinData.ProtoReflect.Descriptor instead.
func (*RspCoinData) Descriptor() ([]byte, []int) {
	return file_internal_game_proto_rawDescGZIP(), []int{10}
}

func (x *RspCoinData) GetUserId() uint32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *RspCoinData) GetBalance() []*UserBalance {
	if x != nil {
		return x.Balance
	}
	return nil
}

// 游戏货币操作接口响应体
type RspCoin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool         `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"` // 是否成功
	Msg     string       `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`          // 错误消息
	Data    *RspCoinData `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`        // 用户货币余额
}

func (x *RspCoin) Reset() {
	*x = RspCoin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_game_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspCoin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspCoin) ProtoMessage() {}

func (x *RspCoin) ProtoReflect() protoreflect.Message {
	mi := &file_internal_game_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspCoin.ProtoReflect.Descriptor instead.
func (*RspCoin) Descriptor() ([]byte, []int) {
	return file_internal_game_proto_rawDescGZIP(), []int{11}
}

func (x *RspCoin) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *RspCoin) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *RspCoin) GetData() *RspCoinData {
	if x != nil {
		return x.Data
	}
	return nil
}

type ReqAddExp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId uint32 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` // 用户ID
	Exp    uint32 `protobuf:"varint,2,opt,name=exp,proto3" json:"exp,omitempty"`                     // 经验值
	Desc   string `protobuf:"bytes,3,opt,name=desc,proto3" json:"desc,omitempty"`                    // 经验值说明, 说明是什么动作获得的经验值，比如： 登录、游戏、任务、活动等
}

func (x *ReqAddExp) Reset() {
	*x = ReqAddExp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_game_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqAddExp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqAddExp) ProtoMessage() {}

func (x *ReqAddExp) ProtoReflect() protoreflect.Message {
	mi := &file_internal_game_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqAddExp.ProtoReflect.Descriptor instead.
func (*ReqAddExp) Descriptor() ([]byte, []int) {
	return file_internal_game_proto_rawDescGZIP(), []int{12}
}

func (x *ReqAddExp) GetUserId() uint32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ReqAddExp) GetExp() uint32 {
	if x != nil {
		return x.Exp
	}
	return 0
}

func (x *ReqAddExp) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

type RspAddExp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"` // 是否成功
	Msg     string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`          // 错误消息
	Exp     uint32 `protobuf:"varint,3,opt,name=exp,proto3" json:"exp,omitempty"`         // 用户当前游戏经验值
	Lv      uint32 `protobuf:"varint,4,opt,name=lv,proto3" json:"lv,omitempty"`           // 用户当前游戏等级
}

func (x *RspAddExp) Reset() {
	*x = RspAddExp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_game_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspAddExp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspAddExp) ProtoMessage() {}

func (x *RspAddExp) ProtoReflect() protoreflect.Message {
	mi := &file_internal_game_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspAddExp.ProtoReflect.Descriptor instead.
func (*RspAddExp) Descriptor() ([]byte, []int) {
	return file_internal_game_proto_rawDescGZIP(), []int{13}
}

func (x *RspAddExp) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *RspAddExp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *RspAddExp) GetExp() uint32 {
	if x != nil {
		return x.Exp
	}
	return 0
}

func (x *RspAddExp) GetLv() uint32 {
	if x != nil {
		return x.Lv
	}
	return 0
}

// 游戏结算请求体(针对每个玩家单独结算场景)
type ReqSettlementOne struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoomId      string           `protobuf:"bytes,1,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`        // 游戏对局 ID
	GameId      int32            `protobuf:"varint,2,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`       // 游戏 ID, 参见 GAMEID
	GameMode    int32            `protobuf:"varint,3,opt,name=game_mode,json=gameMode,proto3" json:"game_mode,omitempty"` // 游戏模式, 参见 GAMEMODE
	Duration    int32            `protobuf:"varint,4,opt,name=duration,proto3" json:"duration,omitempty"`                 // 游戏时长，单位秒
	Participant *GameParticipant `protobuf:"bytes,5,opt,name=participant,proto3" json:"participant,omitempty"`            // 游戏玩家信息
	OwnerId     uint32           `protobuf:"varint,6,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty"`    // 房主 ID
}

func (x *ReqSettlementOne) Reset() {
	*x = ReqSettlementOne{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_game_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqSettlementOne) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqSettlementOne) ProtoMessage() {}

func (x *ReqSettlementOne) ProtoReflect() protoreflect.Message {
	mi := &file_internal_game_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqSettlementOne.ProtoReflect.Descriptor instead.
func (*ReqSettlementOne) Descriptor() ([]byte, []int) {
	return file_internal_game_proto_rawDescGZIP(), []int{14}
}

func (x *ReqSettlementOne) GetRoomId() string {
	if x != nil {
		return x.RoomId
	}
	return ""
}

func (x *ReqSettlementOne) GetGameId() int32 {
	if x != nil {
		return x.GameId
	}
	return 0
}

func (x *ReqSettlementOne) GetGameMode() int32 {
	if x != nil {
		return x.GameMode
	}
	return 0
}

func (x *ReqSettlementOne) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *ReqSettlementOne) GetParticipant() *GameParticipant {
	if x != nil {
		return x.Participant
	}
	return nil
}

func (x *ReqSettlementOne) GetOwnerId() uint32 {
	if x != nil {
		return x.OwnerId
	}
	return 0
}

// 游戏结算响应体(针对每个玩家单独结算场景)
type RspSettlementOne struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool               `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"` // 是否成功
	Msg     string             `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`          // 错误消息
	Data    *RspSettlementData `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`        // 游戏结算数据
}

func (x *RspSettlementOne) Reset() {
	*x = RspSettlementOne{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_game_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspSettlementOne) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspSettlementOne) ProtoMessage() {}

func (x *RspSettlementOne) ProtoReflect() protoreflect.Message {
	mi := &file_internal_game_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspSettlementOne.ProtoReflect.Descriptor instead.
func (*RspSettlementOne) Descriptor() ([]byte, []int) {
	return file_internal_game_proto_rawDescGZIP(), []int{15}
}

func (x *RspSettlementOne) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *RspSettlementOne) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *RspSettlementOne) GetData() *RspSettlementData {
	if x != nil {
		return x.Data
	}
	return nil
}

var File_internal_game_proto protoreflect.FileDescriptor

var file_internal_game_proto_rawDesc = []byte{
	0x0a, 0x13, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02, 0x70, 0x62, 0x22, 0xff, 0x01, 0x0a, 0x1a, 0x52, 0x65,
	0x71, 0x44, 0x69, 0x61, 0x6d, 0x6f, 0x6e, 0x64, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x1c, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x01, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x63, 0x68,
	0x69, 0x70, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x09, 0x67, 0x61, 0x6d,
	0x65, 0x43, 0x68, 0x69, 0x70, 0x73, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x67, 0x61, 0x6d,
	0x65, 0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x48, 0x03, 0x52, 0x08,
	0x67, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x64,
	0x69, 0x61, 0x6d, 0x6f, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x48, 0x04, 0x52, 0x07,
	0x64, 0x69, 0x61, 0x6d, 0x6f, 0x6e, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x63, 0x68, 0x69, 0x70,
	0x73, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x42,
	0x0a, 0x0a, 0x08, 0x5f, 0x64, 0x69, 0x61, 0x6d, 0x6f, 0x6e, 0x64, 0x22, 0x5d, 0x0a, 0x1a, 0x52,
	0x73, 0x70, 0x44, 0x69, 0x61, 0x6d, 0x6f, 0x6e, 0x64, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x17, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x01, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x6d, 0x73, 0x67, 0x22, 0x65, 0x0a, 0x0d, 0x52, 0x65,
	0x71, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x55, 0x73, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x75,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x15, 0x0a,
	0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x03, 0x6d, 0x73,
	0x67, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x88, 0x01, 0x01, 0x42,
	0x06, 0x0a, 0x04, 0x5f, 0x6d, 0x73, 0x67, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x22, 0x50, 0x0a, 0x0d, 0x52, 0x73, 0x70, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x55, 0x73,
	0x65, 0x72, 0x12, 0x17, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x00, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x6d,
	0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x88,
	0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x5f,
	0x6d, 0x73, 0x67, 0x22, 0x7b, 0x0a, 0x0f, 0x47, 0x61, 0x6d, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x72,
	0x61, 0x6e, 0x6b, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x73, 0x5f, 0x77, 0x69, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x73, 0x57, 0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x78,
	0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x65, 0x78, 0x70, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x6f, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x69, 0x6e,
	0x22, 0xce, 0x01, 0x0a, 0x0d, 0x52, 0x65, 0x71, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x67,
	0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x67, 0x61,
	0x6d, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x6d, 0x6f, 0x64,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a,
	0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49,
	0x64, 0x22, 0x52, 0x0a, 0x11, 0x52, 0x73, 0x70, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x10, 0x0a, 0x03, 0x65, 0x78, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x65, 0x78,
	0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x63, 0x6f, 0x69, 0x6e, 0x22, 0x66, 0x0a, 0x0d, 0x52, 0x73, 0x70, 0x53, 0x65, 0x74, 0x74,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d,
	0x73, 0x67, 0x12, 0x29, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x73, 0x70, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xc5, 0x01,
	0x0a, 0x07, 0x52, 0x65, 0x71, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02,
	0x6f, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x6f, 0x70, 0x12, 0x1b, 0x0a, 0x09,
	0x6f, 0x70, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x6f, 0x70, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x74,
	0x73, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x64, 0x65, 0x73, 0x63, 0x22, 0x68, 0x0a, 0x0b, 0x55, 0x73, 0x65, 0x72, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x12, 0x22, 0x0a, 0x0a, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x09, 0x6d, 0x6f, 0x6e, 0x65,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22,
	0x51, 0x0a, 0x0b, 0x52, 0x73, 0x70, 0x43, 0x6f, 0x69, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x17,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x22, 0x5a, 0x0a, 0x07, 0x52, 0x73, 0x70, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x23, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x73, 0x70,
	0x43, 0x6f, 0x69, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x4a,
	0x0a, 0x09, 0x52, 0x65, 0x71, 0x41, 0x64, 0x64, 0x45, 0x78, 0x70, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x78, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x03, 0x65, 0x78, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x22, 0x59, 0x0a, 0x09, 0x52, 0x73,
	0x70, 0x41, 0x64, 0x64, 0x45, 0x78, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6d, 0x73, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x78, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x03, 0x65, 0x78, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x6c, 0x76, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x02, 0x6c, 0x76, 0x22, 0xcf, 0x01, 0x0a, 0x10, 0x52, 0x65, 0x71, 0x53, 0x65, 0x74,
	0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x6e, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f,
	0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x6f, 0x6f,
	0x6d, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x67, 0x61, 0x6d, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x67, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69,
	0x70, 0x61, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x62, 0x2e,
	0x47, 0x61, 0x6d, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x52,
	0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x08,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x22, 0x69, 0x0a, 0x10, 0x52, 0x73, 0x70, 0x53, 0x65,
	0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x6e, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x29, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x73, 0x70, 0x53, 0x65,
	0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x2a, 0x5a, 0x0a, 0x06, 0x47, 0x41, 0x4d, 0x45, 0x49, 0x44, 0x12, 0x13, 0x0a, 0x0f,
	0x47, 0x41, 0x4d, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x00, 0x12, 0x10, 0x0a, 0x0c, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x55, 0x44,
	0x4f, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x43,
	0x41, 0x52, 0x52, 0x4f, 0x4d, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x47, 0x41, 0x4d, 0x45, 0x5f,
	0x49, 0x44, 0x5f, 0x42, 0x49, 0x4c, 0x4c, 0x49, 0x41, 0x52, 0x44, 0x53, 0x10, 0x03, 0x2a, 0x52,
	0x0a, 0x08, 0x47, 0x41, 0x4d, 0x45, 0x4d, 0x4f, 0x44, 0x45, 0x12, 0x18, 0x0a, 0x14, 0x47, 0x41,
	0x4d, 0x45, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x4f, 0x4e, 0x45, 0x5f, 0x56, 0x53, 0x5f, 0x4f,
	0x4e, 0x45, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x4d, 0x4f, 0x44,
	0x45, 0x5f, 0x54, 0x57, 0x4f, 0x5f, 0x56, 0x53, 0x5f, 0x54, 0x57, 0x4f, 0x10, 0x01, 0x12, 0x12,
	0x0a, 0x0e, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x46, 0x4f, 0x55, 0x52,
	0x10, 0x02, 0x2a, 0x5e, 0x0a, 0x0a, 0x4d, 0x4f, 0x4e, 0x45, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x12, 0x18, 0x0a, 0x14, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x4d, 0x4f, 0x4e, 0x45, 0x59, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x49, 0x4e, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x47, 0x41,
	0x4d, 0x45, 0x5f, 0x4d, 0x4f, 0x4e, 0x45, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x48,
	0x41, 0x52, 0x4d, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x4d, 0x4f,
	0x4e, 0x45, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x49, 0x41, 0x4d, 0x4f, 0x4e, 0x44,
	0x10, 0x02, 0x2a, 0xe2, 0x02, 0x0a, 0x09, 0x4f, 0x50, 0x5f, 0x44, 0x45, 0x54, 0x41, 0x49, 0x4c,
	0x12, 0x16, 0x0a, 0x12, 0x4f, 0x50, 0x5f, 0x44, 0x45, 0x54, 0x41, 0x49, 0x4c, 0x5f, 0x52, 0x45,
	0x43, 0x48, 0x41, 0x52, 0x47, 0x45, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x4f, 0x50, 0x5f, 0x44,
	0x45, 0x54, 0x41, 0x49, 0x4c, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x55, 0x4d, 0x45, 0x10, 0x01, 0x12,
	0x14, 0x0a, 0x10, 0x4f, 0x50, 0x5f, 0x44, 0x45, 0x54, 0x41, 0x49, 0x4c, 0x5f, 0x49, 0x4e, 0x43,
	0x4f, 0x4d, 0x45, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x4f, 0x50, 0x5f, 0x44, 0x45, 0x54, 0x41,
	0x49, 0x4c, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x44, 0x52, 0x41, 0x57, 0x10, 0x03, 0x12, 0x18, 0x0a,
	0x14, 0x4f, 0x50, 0x5f, 0x44, 0x45, 0x54, 0x41, 0x49, 0x4c, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x53, 0x43, 0x41, 0x54, 0x45, 0x10, 0x04, 0x12, 0x14, 0x0a, 0x10, 0x4f, 0x50, 0x5f, 0x44, 0x45,
	0x54, 0x41, 0x49, 0x4c, 0x5f, 0x52, 0x45, 0x46, 0x55, 0x4e, 0x44, 0x10, 0x05, 0x12, 0x15, 0x0a,
	0x11, 0x4f, 0x50, 0x5f, 0x44, 0x45, 0x54, 0x41, 0x49, 0x4c, 0x5f, 0x53, 0x55, 0x42, 0x53, 0x49,
	0x44, 0x59, 0x10, 0x06, 0x12, 0x12, 0x0a, 0x0e, 0x4f, 0x50, 0x5f, 0x44, 0x45, 0x54, 0x41, 0x49,
	0x4c, 0x5f, 0x47, 0x49, 0x56, 0x45, 0x10, 0x07, 0x12, 0x1c, 0x0a, 0x18, 0x4f, 0x50, 0x5f, 0x44,
	0x45, 0x54, 0x41, 0x49, 0x4c, 0x5f, 0x50, 0x52, 0x4f, 0x58, 0x59, 0x5f, 0x52, 0x45, 0x43, 0x48,
	0x41, 0x52, 0x47, 0x45, 0x10, 0x08, 0x12, 0x16, 0x0a, 0x12, 0x4f, 0x50, 0x5f, 0x44, 0x45, 0x54,
	0x41, 0x49, 0x4c, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x42, 0x45, 0x54, 0x10, 0x09, 0x12, 0x1d,
	0x0a, 0x19, 0x4f, 0x50, 0x5f, 0x44, 0x45, 0x54, 0x41, 0x49, 0x4c, 0x5f, 0x47, 0x41, 0x4d, 0x45,
	0x5f, 0x53, 0x45, 0x54, 0x54, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x0a, 0x12, 0x19, 0x0a,
	0x15, 0x4f, 0x50, 0x5f, 0x44, 0x45, 0x54, 0x41, 0x49, 0x4c, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x5f,
	0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x10, 0x0b, 0x12, 0x17, 0x0a, 0x13, 0x4f, 0x50, 0x5f, 0x44,
	0x45, 0x54, 0x41, 0x49, 0x4c, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x10,
	0x0c, 0x12, 0x14, 0x0a, 0x10, 0x4f, 0x50, 0x5f, 0x44, 0x45, 0x54, 0x41, 0x49, 0x4c, 0x5f, 0x4f,
	0x48, 0x54, 0x45, 0x52, 0x53, 0x10, 0x0d, 0x42, 0x0b, 0x5a, 0x09, 0x2e, 0x2e, 0x2f, 0x61, 0x70,
	0x70, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_internal_game_proto_rawDescOnce sync.Once
	file_internal_game_proto_rawDescData = file_internal_game_proto_rawDesc
)

func file_internal_game_proto_rawDescGZIP() []byte {
	file_internal_game_proto_rawDescOnce.Do(func() {
		file_internal_game_proto_rawDescData = protoimpl.X.CompressGZIP(file_internal_game_proto_rawDescData)
	})
	return file_internal_game_proto_rawDescData
}

var file_internal_game_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_internal_game_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_internal_game_proto_goTypes = []interface{}{
	(GAMEID)(0),                        // 0: pb.GAMEID
	(GAMEMODE)(0),                      // 1: pb.GAMEMODE
	(MONEY_TYPE)(0),                    // 2: pb.MONEY_TYPE
	(OP_DETAIL)(0),                     // 3: pb.OP_DETAIL
	(*ReqDiamondExchangeCallback)(nil), // 4: pb.ReqDiamondExchangeCallback
	(*RspDiamondExchangeCallback)(nil), // 5: pb.RspDiamondExchangeCallback
	(*ReqNotifyUser)(nil),              // 6: pb.ReqNotifyUser
	(*RspNotifyUser)(nil),              // 7: pb.RspNotifyUser
	(*GameParticipant)(nil),            // 8: pb.GameParticipant
	(*ReqSettlement)(nil),              // 9: pb.ReqSettlement
	(*RspSettlementData)(nil),          // 10: pb.RspSettlementData
	(*RspSettlement)(nil),              // 11: pb.RspSettlement
	(*ReqCoin)(nil),                    // 12: pb.ReqCoin
	(*UserBalance)(nil),                // 13: pb.UserBalance
	(*RspCoinData)(nil),                // 14: pb.RspCoinData
	(*RspCoin)(nil),                    // 15: pb.RspCoin
	(*ReqAddExp)(nil),                  // 16: pb.ReqAddExp
	(*RspAddExp)(nil),                  // 17: pb.RspAddExp
	(*ReqSettlementOne)(nil),           // 18: pb.ReqSettlementOne
	(*RspSettlementOne)(nil),           // 19: pb.RspSettlementOne
}
var file_internal_game_proto_depIdxs = []int32{
	8,  // 0: pb.ReqSettlement.participants:type_name -> pb.GameParticipant
	10, // 1: pb.RspSettlement.data:type_name -> pb.RspSettlementData
	13, // 2: pb.RspCoinData.balance:type_name -> pb.UserBalance
	14, // 3: pb.RspCoin.data:type_name -> pb.RspCoinData
	8,  // 4: pb.ReqSettlementOne.participant:type_name -> pb.GameParticipant
	10, // 5: pb.RspSettlementOne.data:type_name -> pb.RspSettlementData
	6,  // [6:6] is the sub-list for method output_type
	6,  // [6:6] is the sub-list for method input_type
	6,  // [6:6] is the sub-list for extension type_name
	6,  // [6:6] is the sub-list for extension extendee
	0,  // [0:6] is the sub-list for field type_name
}

func init() { file_internal_game_proto_init() }
func file_internal_game_proto_init() {
	if File_internal_game_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_internal_game_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqDiamondExchangeCallback); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_game_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspDiamondExchangeCallback); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_game_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqNotifyUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_game_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspNotifyUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_game_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameParticipant); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_game_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqSettlement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_game_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspSettlementData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_game_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspSettlement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_game_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqCoin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_game_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserBalance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_game_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspCoinData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_game_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspCoin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_game_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqAddExp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_game_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspAddExp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_game_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqSettlementOne); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_game_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspSettlementOne); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_internal_game_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_internal_game_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_internal_game_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_internal_game_proto_msgTypes[3].OneofWrappers = []interface{}{}
	file_internal_game_proto_msgTypes[9].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_internal_game_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_internal_game_proto_goTypes,
		DependencyIndexes: file_internal_game_proto_depIdxs,
		EnumInfos:         file_internal_game_proto_enumTypes,
		MessageInfos:      file_internal_game_proto_msgTypes,
	}.Build()
	File_internal_game_proto = out.File
	file_internal_game_proto_rawDesc = nil
	file_internal_game_proto_goTypes = nil
	file_internal_game_proto_depIdxs = nil
}
